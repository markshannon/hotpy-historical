#/* File automatically generated by asdl_c.py. */


class Visitor(object): pass
class mod(object): pass
class Module(mod): pass
class Interactive(mod): pass
class Expression(mod): pass
class Suite(mod): pass
class stmt(object): pass
class FunctionDef(stmt): pass
class ClassDef(stmt): pass
class Return(stmt): pass
class Delete(stmt): pass
class Assign(stmt): pass
class AugAssign(stmt): pass
class For(stmt): pass
class While(stmt): pass
class If(stmt): pass
class With(stmt): pass
class Raise(stmt): pass
class TryExcept(stmt): pass
class TryFinally(stmt): pass
class Assert(stmt): pass
class Import(stmt): pass
class ImportFrom(stmt): pass
class Global(stmt): pass
class Nonlocal(stmt): pass
class Expr(stmt): pass
class Pass(stmt): pass
class Break(stmt): pass
class Continue(stmt): pass
class expr(object): pass
class BoolOp(expr): pass
class BinOp(expr): pass
class UnaryOp(expr): pass
class Lambda(expr): pass
class IfExp(expr): pass
class Dict(expr): pass
class Set(expr): pass
class ListComp(expr): pass
class SetComp(expr): pass
class DictComp(expr): pass
class GeneratorExp(expr): pass
class Yield(expr): pass
class Compare(expr): pass
class Call(expr): pass
class Num(expr): pass
class Str(expr): pass
class Bytes(expr): pass
class Ellipsis(expr): pass
class Attribute(expr): pass
class Subscript(expr): pass
class Starred(expr): pass
class Name(expr): pass
class List(expr): pass
class Tuple(expr): pass
class expr_context(object): pass
class Load(expr_context): pass
class Store(expr_context): pass
class Del(expr_context): pass
class AugLoad(expr_context): pass
class AugStore(expr_context): pass
class Param(expr_context): pass
class slice(object): pass
class Slice(slice): pass
class ExtSlice(slice): pass
class Index(slice): pass
class boolop(object): pass
class And(boolop): pass
class Or(boolop): pass
class operator(object): pass
class Add(operator): pass
class Sub(operator): pass
class Mult(operator): pass
class Div(operator): pass
class Mod(operator): pass
class Pow(operator): pass
class LShift(operator): pass
class RShift(operator): pass
class BitOr(operator): pass
class BitXor(operator): pass
class BitAnd(operator): pass
class FloorDiv(operator): pass
class unaryop(object): pass
class Invert(unaryop): pass
class Not(unaryop): pass
class UAdd(unaryop): pass
class USub(unaryop): pass
class cmpop(object): pass
class Eq(cmpop): pass
class NotEq(cmpop): pass
class Lt(cmpop): pass
class LtE(cmpop): pass
class Gt(cmpop): pass
class GtE(cmpop): pass
class Is(cmpop): pass
class IsNot(cmpop): pass
class In(cmpop): pass
class NotIn(cmpop): pass
class comprehension(object): pass
class excepthandler(object): pass
class ExceptHandler(excepthandler): pass
class arguments(object): pass
class arg(object): pass
class keyword(object): pass
class alias(object): pass

