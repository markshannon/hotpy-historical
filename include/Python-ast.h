/* File automatically generated by asdl_c.py. */

#ifndef PYTHON_AST_H
#define PYTHON_AST_H
extern GVMT_OBJECT(type)* type_AST_Visitor;
typedef GVMT_OBJECT(AST_Visitor)* R_AST_Visitor;

extern GVMT_OBJECT(type)* type_AST_mod;
typedef GVMT_OBJECT(AST_mod)* R_AST_mod;

extern GVMT_OBJECT(type)* type_AST_Module;
typedef GVMT_OBJECT(AST_Module)* R_AST_Module;

extern GVMT_OBJECT(type)* type_AST_Interactive;
typedef GVMT_OBJECT(AST_Interactive)* R_AST_Interactive;

extern GVMT_OBJECT(type)* type_AST_Expression;
typedef GVMT_OBJECT(AST_Expression)* R_AST_Expression;

extern GVMT_OBJECT(type)* type_AST_Suite;
typedef GVMT_OBJECT(AST_Suite)* R_AST_Suite;

extern GVMT_OBJECT(type)* type_AST_stmt;
typedef GVMT_OBJECT(AST_stmt)* R_AST_stmt;

extern GVMT_OBJECT(type)* type_AST_FunctionDef;
typedef GVMT_OBJECT(AST_FunctionDef)* R_AST_FunctionDef;

extern GVMT_OBJECT(type)* type_AST_ClassDef;
typedef GVMT_OBJECT(AST_ClassDef)* R_AST_ClassDef;

extern GVMT_OBJECT(type)* type_AST_Return;
typedef GVMT_OBJECT(AST_Return)* R_AST_Return;

extern GVMT_OBJECT(type)* type_AST_Delete;
typedef GVMT_OBJECT(AST_Delete)* R_AST_Delete;

extern GVMT_OBJECT(type)* type_AST_Assign;
typedef GVMT_OBJECT(AST_Assign)* R_AST_Assign;

extern GVMT_OBJECT(type)* type_AST_AugAssign;
typedef GVMT_OBJECT(AST_AugAssign)* R_AST_AugAssign;

extern GVMT_OBJECT(type)* type_AST_For;
typedef GVMT_OBJECT(AST_For)* R_AST_For;

extern GVMT_OBJECT(type)* type_AST_While;
typedef GVMT_OBJECT(AST_While)* R_AST_While;

extern GVMT_OBJECT(type)* type_AST_If;
typedef GVMT_OBJECT(AST_If)* R_AST_If;

extern GVMT_OBJECT(type)* type_AST_With;
typedef GVMT_OBJECT(AST_With)* R_AST_With;

extern GVMT_OBJECT(type)* type_AST_Raise;
typedef GVMT_OBJECT(AST_Raise)* R_AST_Raise;

extern GVMT_OBJECT(type)* type_AST_TryExcept;
typedef GVMT_OBJECT(AST_TryExcept)* R_AST_TryExcept;

extern GVMT_OBJECT(type)* type_AST_TryFinally;
typedef GVMT_OBJECT(AST_TryFinally)* R_AST_TryFinally;

extern GVMT_OBJECT(type)* type_AST_Assert;
typedef GVMT_OBJECT(AST_Assert)* R_AST_Assert;

extern GVMT_OBJECT(type)* type_AST_Import;
typedef GVMT_OBJECT(AST_Import)* R_AST_Import;

extern GVMT_OBJECT(type)* type_AST_ImportFrom;
typedef GVMT_OBJECT(AST_ImportFrom)* R_AST_ImportFrom;

extern GVMT_OBJECT(type)* type_AST_Global;
typedef GVMT_OBJECT(AST_Global)* R_AST_Global;

extern GVMT_OBJECT(type)* type_AST_Nonlocal;
typedef GVMT_OBJECT(AST_Nonlocal)* R_AST_Nonlocal;

extern GVMT_OBJECT(type)* type_AST_Expr;
typedef GVMT_OBJECT(AST_Expr)* R_AST_Expr;

extern GVMT_OBJECT(type)* type_AST_Pass;
typedef GVMT_OBJECT(AST_Pass)* R_AST_Pass;

extern GVMT_OBJECT(type)* type_AST_Break;
typedef GVMT_OBJECT(AST_Break)* R_AST_Break;

extern GVMT_OBJECT(type)* type_AST_Continue;
typedef GVMT_OBJECT(AST_Continue)* R_AST_Continue;

extern GVMT_OBJECT(type)* type_AST_expr;
typedef GVMT_OBJECT(AST_expr)* R_AST_expr;

extern GVMT_OBJECT(type)* type_AST_BoolOp;
typedef GVMT_OBJECT(AST_BoolOp)* R_AST_BoolOp;

extern GVMT_OBJECT(type)* type_AST_BinOp;
typedef GVMT_OBJECT(AST_BinOp)* R_AST_BinOp;

extern GVMT_OBJECT(type)* type_AST_UnaryOp;
typedef GVMT_OBJECT(AST_UnaryOp)* R_AST_UnaryOp;

extern GVMT_OBJECT(type)* type_AST_Lambda;
typedef GVMT_OBJECT(AST_Lambda)* R_AST_Lambda;

extern GVMT_OBJECT(type)* type_AST_IfExp;
typedef GVMT_OBJECT(AST_IfExp)* R_AST_IfExp;

extern GVMT_OBJECT(type)* type_AST_Dict;
typedef GVMT_OBJECT(AST_Dict)* R_AST_Dict;

extern GVMT_OBJECT(type)* type_AST_Set;
typedef GVMT_OBJECT(AST_Set)* R_AST_Set;

extern GVMT_OBJECT(type)* type_AST_ListComp;
typedef GVMT_OBJECT(AST_ListComp)* R_AST_ListComp;

extern GVMT_OBJECT(type)* type_AST_SetComp;
typedef GVMT_OBJECT(AST_SetComp)* R_AST_SetComp;

extern GVMT_OBJECT(type)* type_AST_DictComp;
typedef GVMT_OBJECT(AST_DictComp)* R_AST_DictComp;

extern GVMT_OBJECT(type)* type_AST_GeneratorExp;
typedef GVMT_OBJECT(AST_GeneratorExp)* R_AST_GeneratorExp;

extern GVMT_OBJECT(type)* type_AST_Yield;
typedef GVMT_OBJECT(AST_Yield)* R_AST_Yield;

extern GVMT_OBJECT(type)* type_AST_Compare;
typedef GVMT_OBJECT(AST_Compare)* R_AST_Compare;

extern GVMT_OBJECT(type)* type_AST_Call;
typedef GVMT_OBJECT(AST_Call)* R_AST_Call;

extern GVMT_OBJECT(type)* type_AST_Num;
typedef GVMT_OBJECT(AST_Num)* R_AST_Num;

extern GVMT_OBJECT(type)* type_AST_Str;
typedef GVMT_OBJECT(AST_Str)* R_AST_Str;

extern GVMT_OBJECT(type)* type_AST_Bytes;
typedef GVMT_OBJECT(AST_Bytes)* R_AST_Bytes;

extern GVMT_OBJECT(type)* type_AST_Ellipsis;
typedef GVMT_OBJECT(AST_Ellipsis)* R_AST_Ellipsis;

extern GVMT_OBJECT(type)* type_AST_Attribute;
typedef GVMT_OBJECT(AST_Attribute)* R_AST_Attribute;

extern GVMT_OBJECT(type)* type_AST_Subscript;
typedef GVMT_OBJECT(AST_Subscript)* R_AST_Subscript;

extern GVMT_OBJECT(type)* type_AST_Starred;
typedef GVMT_OBJECT(AST_Starred)* R_AST_Starred;

extern GVMT_OBJECT(type)* type_AST_Name;
typedef GVMT_OBJECT(AST_Name)* R_AST_Name;

extern GVMT_OBJECT(type)* type_AST_List;
typedef GVMT_OBJECT(AST_List)* R_AST_List;

extern GVMT_OBJECT(type)* type_AST_Tuple;
typedef GVMT_OBJECT(AST_Tuple)* R_AST_Tuple;

extern GVMT_OBJECT(type)* type_AST_expr_context;
typedef GVMT_OBJECT(AST_expr_context)* R_AST_expr_context;

extern GVMT_OBJECT(type)* type_AST_Load;
typedef GVMT_OBJECT(AST_Load)* R_AST_Load;

extern GVMT_OBJECT(AST_expr_context)* hotpy_Load_singleton;
extern GVMT_OBJECT(type)* type_AST_Store;
typedef GVMT_OBJECT(AST_Store)* R_AST_Store;

extern GVMT_OBJECT(AST_expr_context)* hotpy_Store_singleton;
extern GVMT_OBJECT(type)* type_AST_Del;
typedef GVMT_OBJECT(AST_Del)* R_AST_Del;

extern GVMT_OBJECT(AST_expr_context)* hotpy_Del_singleton;
extern GVMT_OBJECT(type)* type_AST_AugLoad;
typedef GVMT_OBJECT(AST_AugLoad)* R_AST_AugLoad;

extern GVMT_OBJECT(AST_expr_context)* hotpy_AugLoad_singleton;
extern GVMT_OBJECT(type)* type_AST_AugStore;
typedef GVMT_OBJECT(AST_AugStore)* R_AST_AugStore;

extern GVMT_OBJECT(AST_expr_context)* hotpy_AugStore_singleton;
extern GVMT_OBJECT(type)* type_AST_Param;
typedef GVMT_OBJECT(AST_Param)* R_AST_Param;

extern GVMT_OBJECT(AST_expr_context)* hotpy_Param_singleton;
extern GVMT_OBJECT(type)* type_AST_slice;
typedef GVMT_OBJECT(AST_slice)* R_AST_slice;

extern GVMT_OBJECT(type)* type_AST_Slice;
typedef GVMT_OBJECT(AST_Slice)* R_AST_Slice;

extern GVMT_OBJECT(type)* type_AST_ExtSlice;
typedef GVMT_OBJECT(AST_ExtSlice)* R_AST_ExtSlice;

extern GVMT_OBJECT(type)* type_AST_Index;
typedef GVMT_OBJECT(AST_Index)* R_AST_Index;

extern GVMT_OBJECT(type)* type_AST_boolop;
typedef GVMT_OBJECT(AST_boolop)* R_AST_boolop;

extern GVMT_OBJECT(type)* type_AST_And;
typedef GVMT_OBJECT(AST_And)* R_AST_And;

extern GVMT_OBJECT(AST_boolop)* hotpy_And_singleton;
extern GVMT_OBJECT(type)* type_AST_Or;
typedef GVMT_OBJECT(AST_Or)* R_AST_Or;

extern GVMT_OBJECT(AST_boolop)* hotpy_Or_singleton;
extern GVMT_OBJECT(type)* type_AST_operator;
typedef GVMT_OBJECT(AST_operator)* R_AST_operator;

extern GVMT_OBJECT(type)* type_AST_Add;
typedef GVMT_OBJECT(AST_Add)* R_AST_Add;

extern GVMT_OBJECT(AST_operator)* hotpy_Add_singleton;
extern GVMT_OBJECT(type)* type_AST_Sub;
typedef GVMT_OBJECT(AST_Sub)* R_AST_Sub;

extern GVMT_OBJECT(AST_operator)* hotpy_Sub_singleton;
extern GVMT_OBJECT(type)* type_AST_Mult;
typedef GVMT_OBJECT(AST_Mult)* R_AST_Mult;

extern GVMT_OBJECT(AST_operator)* hotpy_Mult_singleton;
extern GVMT_OBJECT(type)* type_AST_Div;
typedef GVMT_OBJECT(AST_Div)* R_AST_Div;

extern GVMT_OBJECT(AST_operator)* hotpy_Div_singleton;
extern GVMT_OBJECT(type)* type_AST_Mod;
typedef GVMT_OBJECT(AST_Mod)* R_AST_Mod;

extern GVMT_OBJECT(AST_operator)* hotpy_Mod_singleton;
extern GVMT_OBJECT(type)* type_AST_Pow;
typedef GVMT_OBJECT(AST_Pow)* R_AST_Pow;

extern GVMT_OBJECT(AST_operator)* hotpy_Pow_singleton;
extern GVMT_OBJECT(type)* type_AST_LShift;
typedef GVMT_OBJECT(AST_LShift)* R_AST_LShift;

extern GVMT_OBJECT(AST_operator)* hotpy_LShift_singleton;
extern GVMT_OBJECT(type)* type_AST_RShift;
typedef GVMT_OBJECT(AST_RShift)* R_AST_RShift;

extern GVMT_OBJECT(AST_operator)* hotpy_RShift_singleton;
extern GVMT_OBJECT(type)* type_AST_BitOr;
typedef GVMT_OBJECT(AST_BitOr)* R_AST_BitOr;

extern GVMT_OBJECT(AST_operator)* hotpy_BitOr_singleton;
extern GVMT_OBJECT(type)* type_AST_BitXor;
typedef GVMT_OBJECT(AST_BitXor)* R_AST_BitXor;

extern GVMT_OBJECT(AST_operator)* hotpy_BitXor_singleton;
extern GVMT_OBJECT(type)* type_AST_BitAnd;
typedef GVMT_OBJECT(AST_BitAnd)* R_AST_BitAnd;

extern GVMT_OBJECT(AST_operator)* hotpy_BitAnd_singleton;
extern GVMT_OBJECT(type)* type_AST_FloorDiv;
typedef GVMT_OBJECT(AST_FloorDiv)* R_AST_FloorDiv;

extern GVMT_OBJECT(AST_operator)* hotpy_FloorDiv_singleton;
extern GVMT_OBJECT(type)* type_AST_unaryop;
typedef GVMT_OBJECT(AST_unaryop)* R_AST_unaryop;

extern GVMT_OBJECT(type)* type_AST_Invert;
typedef GVMT_OBJECT(AST_Invert)* R_AST_Invert;

extern GVMT_OBJECT(AST_unaryop)* hotpy_Invert_singleton;
extern GVMT_OBJECT(type)* type_AST_Not;
typedef GVMT_OBJECT(AST_Not)* R_AST_Not;

extern GVMT_OBJECT(AST_unaryop)* hotpy_Not_singleton;
extern GVMT_OBJECT(type)* type_AST_UAdd;
typedef GVMT_OBJECT(AST_UAdd)* R_AST_UAdd;

extern GVMT_OBJECT(AST_unaryop)* hotpy_UAdd_singleton;
extern GVMT_OBJECT(type)* type_AST_USub;
typedef GVMT_OBJECT(AST_USub)* R_AST_USub;

extern GVMT_OBJECT(AST_unaryop)* hotpy_USub_singleton;
extern GVMT_OBJECT(type)* type_AST_cmpop;
typedef GVMT_OBJECT(AST_cmpop)* R_AST_cmpop;

extern GVMT_OBJECT(type)* type_AST_Eq;
typedef GVMT_OBJECT(AST_Eq)* R_AST_Eq;

extern GVMT_OBJECT(AST_cmpop)* hotpy_Eq_singleton;
extern GVMT_OBJECT(type)* type_AST_NotEq;
typedef GVMT_OBJECT(AST_NotEq)* R_AST_NotEq;

extern GVMT_OBJECT(AST_cmpop)* hotpy_NotEq_singleton;
extern GVMT_OBJECT(type)* type_AST_Lt;
typedef GVMT_OBJECT(AST_Lt)* R_AST_Lt;

extern GVMT_OBJECT(AST_cmpop)* hotpy_Lt_singleton;
extern GVMT_OBJECT(type)* type_AST_LtE;
typedef GVMT_OBJECT(AST_LtE)* R_AST_LtE;

extern GVMT_OBJECT(AST_cmpop)* hotpy_LtE_singleton;
extern GVMT_OBJECT(type)* type_AST_Gt;
typedef GVMT_OBJECT(AST_Gt)* R_AST_Gt;

extern GVMT_OBJECT(AST_cmpop)* hotpy_Gt_singleton;
extern GVMT_OBJECT(type)* type_AST_GtE;
typedef GVMT_OBJECT(AST_GtE)* R_AST_GtE;

extern GVMT_OBJECT(AST_cmpop)* hotpy_GtE_singleton;
extern GVMT_OBJECT(type)* type_AST_Is;
typedef GVMT_OBJECT(AST_Is)* R_AST_Is;

extern GVMT_OBJECT(AST_cmpop)* hotpy_Is_singleton;
extern GVMT_OBJECT(type)* type_AST_IsNot;
typedef GVMT_OBJECT(AST_IsNot)* R_AST_IsNot;

extern GVMT_OBJECT(AST_cmpop)* hotpy_IsNot_singleton;
extern GVMT_OBJECT(type)* type_AST_In;
typedef GVMT_OBJECT(AST_In)* R_AST_In;

extern GVMT_OBJECT(AST_cmpop)* hotpy_In_singleton;
extern GVMT_OBJECT(type)* type_AST_NotIn;
typedef GVMT_OBJECT(AST_NotIn)* R_AST_NotIn;

extern GVMT_OBJECT(AST_cmpop)* hotpy_NotIn_singleton;
extern GVMT_OBJECT(type)* type_AST_comprehension;
typedef GVMT_OBJECT(AST_comprehension)* R_AST_comprehension;

extern GVMT_OBJECT(type)* type_AST_excepthandler;
typedef GVMT_OBJECT(AST_excepthandler)* R_AST_excepthandler;

extern GVMT_OBJECT(type)* type_AST_ExceptHandler;
typedef GVMT_OBJECT(AST_ExceptHandler)* R_AST_ExceptHandler;

extern GVMT_OBJECT(type)* type_AST_arguments;
typedef GVMT_OBJECT(AST_arguments)* R_AST_arguments;

extern GVMT_OBJECT(type)* type_AST_arg;
typedef GVMT_OBJECT(AST_arg)* R_AST_arg;

extern GVMT_OBJECT(type)* type_AST_keyword;
typedef GVMT_OBJECT(AST_keyword)* R_AST_keyword;

extern GVMT_OBJECT(type)* type_AST_alias;
typedef GVMT_OBJECT(AST_alias)* R_AST_alias;


GVMT_OBJECT(AST_mod) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of mod */
GVMT_OBJECT(AST_Module) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(list)* body;
};
#define  MODULE_VISIT_INDEX 0

GVMT_OBJECT(AST_Interactive) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(list)* body;
};
#define  INTERACTIVE_VISIT_INDEX 1

GVMT_OBJECT(AST_Expression) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(AST_expr)* body;
};
#define  EXPRESSION_VISIT_INDEX 2

GVMT_OBJECT(AST_Suite) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(list)* body;
};
#define  SUITE_VISIT_INDEX 3

/* End subtypes of mod */

GVMT_OBJECT(AST_stmt) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};

/* Begin subtypes of stmt */
GVMT_OBJECT(AST_FunctionDef) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* name;
    GVMT_OBJECT(AST_arguments)* args;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* decorator_list;
    GVMT_OBJECT(AST_expr)* returns;
};
#define  FUNCTIONDEF_VISIT_INDEX 0

GVMT_OBJECT(AST_ClassDef) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* name;
    GVMT_OBJECT(list)* bases;
    GVMT_OBJECT(list)* keywords;
    GVMT_OBJECT(AST_expr)* starargs;
    GVMT_OBJECT(AST_expr)* kwargs;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* decorator_list;
};
#define  CLASSDEF_VISIT_INDEX 1

GVMT_OBJECT(AST_Return) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
};
#define  RETURN_VISIT_INDEX 2

GVMT_OBJECT(AST_Delete) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* targets;
};
#define  DELETE_VISIT_INDEX 3

GVMT_OBJECT(AST_Assign) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* targets;
    GVMT_OBJECT(AST_expr)* value;
};
#define  ASSIGN_VISIT_INDEX 4

GVMT_OBJECT(AST_AugAssign) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* target;
    GVMT_OBJECT(AST_operator)* op;
    GVMT_OBJECT(AST_expr)* value;
};
#define  AUGASSIGN_VISIT_INDEX 5

GVMT_OBJECT(AST_For) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* target;
    GVMT_OBJECT(AST_expr)* iter;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* orelse;
};
#define  FOR_VISIT_INDEX 6

GVMT_OBJECT(AST_While) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* test;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* orelse;
};
#define  WHILE_VISIT_INDEX 7

GVMT_OBJECT(AST_If) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* test;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* orelse;
};
#define  IF_VISIT_INDEX 8

GVMT_OBJECT(AST_With) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* context_expr;
    GVMT_OBJECT(AST_expr)* optional_vars;
    GVMT_OBJECT(list)* body;
};
#define  WITH_VISIT_INDEX 9

GVMT_OBJECT(AST_Raise) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* exc;
    GVMT_OBJECT(AST_expr)* cause;
};
#define  RAISE_VISIT_INDEX 10

GVMT_OBJECT(AST_TryExcept) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* handlers;
    GVMT_OBJECT(list)* orelse;
};
#define  TRYEXCEPT_VISIT_INDEX 11

GVMT_OBJECT(AST_TryFinally) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* body;
    GVMT_OBJECT(list)* finalbody;
};
#define  TRYFINALLY_VISIT_INDEX 12

GVMT_OBJECT(AST_Assert) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* test;
    GVMT_OBJECT(AST_expr)* msg;
};
#define  ASSERT_VISIT_INDEX 13

GVMT_OBJECT(AST_Import) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* names;
};
#define  IMPORT_VISIT_INDEX 14

GVMT_OBJECT(AST_ImportFrom) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* module;
    GVMT_OBJECT(list)* names;
    int level;
};
#define  IMPORTFROM_VISIT_INDEX 15

GVMT_OBJECT(AST_Global) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* names;
};
#define  GLOBAL_VISIT_INDEX 16

GVMT_OBJECT(AST_Nonlocal) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* names;
};
#define  NONLOCAL_VISIT_INDEX 17

GVMT_OBJECT(AST_Expr) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
};
#define  EXPR_VISIT_INDEX 18

GVMT_OBJECT(AST_Pass) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};
#define  PASS_VISIT_INDEX 19

GVMT_OBJECT(AST_Break) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};
#define  BREAK_VISIT_INDEX 20

GVMT_OBJECT(AST_Continue) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};
#define  CONTINUE_VISIT_INDEX 21

/* End subtypes of stmt */

GVMT_OBJECT(AST_expr) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};

/* Begin subtypes of expr */
GVMT_OBJECT(AST_BoolOp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_boolop)* op;
    GVMT_OBJECT(list)* values;
};
#define  BOOLOP_VISIT_INDEX 0

GVMT_OBJECT(AST_BinOp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* left;
    GVMT_OBJECT(AST_operator)* op;
    GVMT_OBJECT(AST_expr)* right;
};
#define  BINOP_VISIT_INDEX 1

GVMT_OBJECT(AST_UnaryOp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_unaryop)* op;
    GVMT_OBJECT(AST_expr)* operand;
};
#define  UNARYOP_VISIT_INDEX 2

GVMT_OBJECT(AST_Lambda) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_arguments)* args;
    GVMT_OBJECT(AST_expr)* body;
};
#define  LAMBDA_VISIT_INDEX 3

GVMT_OBJECT(AST_IfExp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* test;
    GVMT_OBJECT(AST_expr)* body;
    GVMT_OBJECT(AST_expr)* orelse;
};
#define  IFEXP_VISIT_INDEX 4

GVMT_OBJECT(AST_Dict) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* keys;
    GVMT_OBJECT(list)* values;
};
#define  DICT_VISIT_INDEX 5

GVMT_OBJECT(AST_Set) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* elts;
};
#define  SET_VISIT_INDEX 6

GVMT_OBJECT(AST_ListComp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* elt;
    GVMT_OBJECT(list)* generators;
};
#define  LISTCOMP_VISIT_INDEX 7

GVMT_OBJECT(AST_SetComp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* elt;
    GVMT_OBJECT(list)* generators;
};
#define  SETCOMP_VISIT_INDEX 8

GVMT_OBJECT(AST_DictComp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* key;
    GVMT_OBJECT(AST_expr)* value;
    GVMT_OBJECT(list)* generators;
};
#define  DICTCOMP_VISIT_INDEX 9

GVMT_OBJECT(AST_GeneratorExp) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* elt;
    GVMT_OBJECT(list)* generators;
};
#define  GENERATOREXP_VISIT_INDEX 10

GVMT_OBJECT(AST_Yield) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
};
#define  YIELD_VISIT_INDEX 11

GVMT_OBJECT(AST_Compare) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* left;
    GVMT_OBJECT(list)* ops;
    GVMT_OBJECT(list)* comparators;
};
#define  COMPARE_VISIT_INDEX 12

GVMT_OBJECT(AST_Call) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* func;
    GVMT_OBJECT(list)* args;
    GVMT_OBJECT(list)* keywords;
    GVMT_OBJECT(AST_expr)* starargs;
    GVMT_OBJECT(AST_expr)* kwargs;
};
#define  CALL_VISIT_INDEX 13

GVMT_OBJECT(AST_Num) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(object)* n;
};
#define  NUM_VISIT_INDEX 14

GVMT_OBJECT(AST_Str) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* s;
};
#define  STR_VISIT_INDEX 15

GVMT_OBJECT(AST_Bytes) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* s;
};
#define  BYTES_VISIT_INDEX 16

GVMT_OBJECT(AST_Ellipsis) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};
#define  ELLIPSIS_VISIT_INDEX 17

GVMT_OBJECT(AST_Attribute) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
    GVMT_OBJECT(str)* attr;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  ATTRIBUTE_VISIT_INDEX 18

GVMT_OBJECT(AST_Subscript) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
    GVMT_OBJECT(AST_slice)* slice;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  SUBSCRIPT_VISIT_INDEX 19

GVMT_OBJECT(AST_Starred) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* value;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  STARRED_VISIT_INDEX 20

GVMT_OBJECT(AST_Name) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(str)* id;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  NAME_VISIT_INDEX 21

GVMT_OBJECT(AST_List) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* elts;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  LIST_VISIT_INDEX 22

GVMT_OBJECT(AST_Tuple) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(list)* elts;
    GVMT_OBJECT(AST_expr_context)* ctx;
};
#define  TUPLE_VISIT_INDEX 23

/* End subtypes of expr */

GVMT_OBJECT(AST_expr_context) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of expr_context */
GVMT_OBJECT(AST_Load) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  LOAD_VISIT_INDEX 0

GVMT_OBJECT(AST_Store) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  STORE_VISIT_INDEX 1

GVMT_OBJECT(AST_Del) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  DEL_VISIT_INDEX 2

GVMT_OBJECT(AST_AugLoad) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  AUGLOAD_VISIT_INDEX 3

GVMT_OBJECT(AST_AugStore) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  AUGSTORE_VISIT_INDEX 4

GVMT_OBJECT(AST_Param) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  PARAM_VISIT_INDEX 5

/* End subtypes of expr_context */

GVMT_OBJECT(AST_slice) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of slice */
GVMT_OBJECT(AST_Slice) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(AST_expr)* lower;
    GVMT_OBJECT(AST_expr)* upper;
    GVMT_OBJECT(AST_expr)* step;
};
#define  SLICE_VISIT_INDEX 0

GVMT_OBJECT(AST_ExtSlice) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(list)* dims;
};
#define  EXTSLICE_VISIT_INDEX 1

GVMT_OBJECT(AST_Index) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    GVMT_OBJECT(AST_expr)* value;
};
#define  INDEX_VISIT_INDEX 2

/* End subtypes of slice */

GVMT_OBJECT(AST_boolop) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of boolop */
GVMT_OBJECT(AST_And) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  AND_VISIT_INDEX 0

GVMT_OBJECT(AST_Or) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  OR_VISIT_INDEX 1

/* End subtypes of boolop */

GVMT_OBJECT(AST_operator) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of operator */
GVMT_OBJECT(AST_Add) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  ADD_VISIT_INDEX 0

GVMT_OBJECT(AST_Sub) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  SUB_VISIT_INDEX 1

GVMT_OBJECT(AST_Mult) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  MULT_VISIT_INDEX 2

GVMT_OBJECT(AST_Div) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  DIV_VISIT_INDEX 3

GVMT_OBJECT(AST_Mod) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  MOD_VISIT_INDEX 4

GVMT_OBJECT(AST_Pow) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  POW_VISIT_INDEX 5

GVMT_OBJECT(AST_LShift) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  LSHIFT_VISIT_INDEX 6

GVMT_OBJECT(AST_RShift) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  RSHIFT_VISIT_INDEX 7

GVMT_OBJECT(AST_BitOr) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  BITOR_VISIT_INDEX 8

GVMT_OBJECT(AST_BitXor) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  BITXOR_VISIT_INDEX 9

GVMT_OBJECT(AST_BitAnd) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  BITAND_VISIT_INDEX 10

GVMT_OBJECT(AST_FloorDiv) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  FLOORDIV_VISIT_INDEX 11

/* End subtypes of operator */

GVMT_OBJECT(AST_unaryop) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of unaryop */
GVMT_OBJECT(AST_Invert) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  INVERT_VISIT_INDEX 0

GVMT_OBJECT(AST_Not) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  NOT_VISIT_INDEX 1

GVMT_OBJECT(AST_UAdd) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  UADD_VISIT_INDEX 2

GVMT_OBJECT(AST_USub) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  USUB_VISIT_INDEX 3

/* End subtypes of unaryop */

GVMT_OBJECT(AST_cmpop) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};

/* Begin subtypes of cmpop */
GVMT_OBJECT(AST_Eq) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  EQ_VISIT_INDEX 0

GVMT_OBJECT(AST_NotEq) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  NOTEQ_VISIT_INDEX 1

GVMT_OBJECT(AST_Lt) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  LT_VISIT_INDEX 2

GVMT_OBJECT(AST_LtE) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  LTE_VISIT_INDEX 3

GVMT_OBJECT(AST_Gt) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  GT_VISIT_INDEX 4

GVMT_OBJECT(AST_GtE) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  GTE_VISIT_INDEX 5

GVMT_OBJECT(AST_Is) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  IS_VISIT_INDEX 6

GVMT_OBJECT(AST_IsNot) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  ISNOT_VISIT_INDEX 7

GVMT_OBJECT(AST_In) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  IN_VISIT_INDEX 8

GVMT_OBJECT(AST_NotIn) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
};
#define  NOTIN_VISIT_INDEX 9

/* End subtypes of cmpop */

GVMT_OBJECT(AST_comprehension) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    GVMT_OBJECT(AST_expr)* target;
    GVMT_OBJECT(AST_expr)* iter;
    GVMT_OBJECT(list)* ifs;
};

GVMT_OBJECT(AST_excepthandler) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
};

/* Begin subtypes of excepthandler */
GVMT_OBJECT(AST_ExceptHandler) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    uintptr_t visit_index;
    int lineno;
    int col_offset;
    GVMT_OBJECT(AST_expr)* type;
    GVMT_OBJECT(str)* name;
    GVMT_OBJECT(list)* body;
};
#define  EXCEPTHANDLER_VISIT_INDEX 0

/* End subtypes of excepthandler */

GVMT_OBJECT(AST_arguments) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    GVMT_OBJECT(list)* args;
    GVMT_OBJECT(str)* vararg;
    GVMT_OBJECT(AST_expr)* varargannotation;
    GVMT_OBJECT(list)* kwonlyargs;
    GVMT_OBJECT(str)* kwarg;
    GVMT_OBJECT(AST_expr)* kwargannotation;
    GVMT_OBJECT(list)* defaults;
    GVMT_OBJECT(list)* kw_defaults;
};

GVMT_OBJECT(AST_arg) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    GVMT_OBJECT(str)* arg;
    GVMT_OBJECT(AST_expr)* annotation;
};

GVMT_OBJECT(AST_keyword) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    GVMT_OBJECT(str)* arg;
    GVMT_OBJECT(AST_expr)* value;
};

GVMT_OBJECT(AST_alias) {
    GVMT_OBJECT(type)* ob_type; /* read-only */
    uintptr_t ref_count;
    GVMT_OBJECT(str)* name;
    GVMT_OBJECT(str)* asname;
};


GVMT_OBJECT(AST_mod)* _HotPy_AST_Module(R_list body);
GVMT_OBJECT(AST_mod)* _HotPy_AST_Interactive(R_list body);
GVMT_OBJECT(AST_mod)* _HotPy_AST_Expression(GVMT_OBJECT(AST_expr)* body);
GVMT_OBJECT(AST_mod)* _HotPy_AST_Suite(R_list body);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_FunctionDef(GVMT_OBJECT(str)* name,
            GVMT_OBJECT(AST_arguments)* args, R_list body,
            R_list decorator_list, GVMT_OBJECT(AST_expr)* returns, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_ClassDef(GVMT_OBJECT(str)* name,
            R_list bases, R_list keywords, GVMT_OBJECT(AST_expr)* starargs,
            GVMT_OBJECT(AST_expr)* kwargs, R_list body, R_list decorator_list,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Return(GVMT_OBJECT(AST_expr)* value,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Delete(R_list targets, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Assign(R_list targets,
            GVMT_OBJECT(AST_expr)* value, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_AugAssign(GVMT_OBJECT(AST_expr)* target,
            GVMT_OBJECT(AST_operator)* op, GVMT_OBJECT(AST_expr)* value,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_For(GVMT_OBJECT(AST_expr)* target,
            GVMT_OBJECT(AST_expr)* iter, R_list body, R_list orelse,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_While(GVMT_OBJECT(AST_expr)* test,
            R_list body, R_list orelse, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_If(GVMT_OBJECT(AST_expr)* test, R_list body,
            R_list orelse, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_With(GVMT_OBJECT(AST_expr)* context_expr,
            GVMT_OBJECT(AST_expr)* optional_vars, R_list body, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Raise(GVMT_OBJECT(AST_expr)* exc,
            GVMT_OBJECT(AST_expr)* cause, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_TryExcept(R_list body, R_list handlers,
            R_list orelse, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_TryFinally(R_list body, R_list finalbody,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Assert(GVMT_OBJECT(AST_expr)* test,
            GVMT_OBJECT(AST_expr)* msg, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Import(R_list names, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_ImportFrom(GVMT_OBJECT(str)* module,
            R_list names, int level, int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Global(R_list names, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Nonlocal(R_list names, int lineno,
            int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Expr(GVMT_OBJECT(AST_expr)* value,
            int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Pass(int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Break(int lineno, int col_offset);
GVMT_OBJECT(AST_stmt)* _HotPy_AST_Continue(int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_BoolOp(GVMT_OBJECT(AST_boolop)* op,
            R_list values, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_BinOp(GVMT_OBJECT(AST_expr)* left,
            GVMT_OBJECT(AST_operator)* op, GVMT_OBJECT(AST_expr)* right,
            int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_UnaryOp(GVMT_OBJECT(AST_unaryop)* op,
            GVMT_OBJECT(AST_expr)* operand, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Lambda(GVMT_OBJECT(AST_arguments)* args,
            GVMT_OBJECT(AST_expr)* body, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_IfExp(GVMT_OBJECT(AST_expr)* test,
            GVMT_OBJECT(AST_expr)* body, GVMT_OBJECT(AST_expr)* orelse,
            int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Dict(R_list keys, R_list values, int lineno,
            int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Set(R_list elts, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_ListComp(GVMT_OBJECT(AST_expr)* elt,
            R_list generators, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_SetComp(GVMT_OBJECT(AST_expr)* elt,
            R_list generators, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_DictComp(GVMT_OBJECT(AST_expr)* key,
            GVMT_OBJECT(AST_expr)* value, R_list generators, int lineno,
            int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_GeneratorExp(GVMT_OBJECT(AST_expr)* elt,
            R_list generators, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Yield(GVMT_OBJECT(AST_expr)* value,
            int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Compare(GVMT_OBJECT(AST_expr)* left,
            R_list ops, R_list comparators, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Call(GVMT_OBJECT(AST_expr)* func,
            R_list args, R_list keywords, GVMT_OBJECT(AST_expr)* starargs,
            GVMT_OBJECT(AST_expr)* kwargs, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Num(GVMT_OBJECT(object)* n, int lineno,
            int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Str(GVMT_OBJECT(str)* s, int lineno,
            int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Bytes(GVMT_OBJECT(str)* s, int lineno,
            int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Ellipsis(int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Attribute(GVMT_OBJECT(AST_expr)* value,
            GVMT_OBJECT(str)* attr, GVMT_OBJECT(AST_expr_context)* ctx,
            int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Subscript(GVMT_OBJECT(AST_expr)* value,
            GVMT_OBJECT(AST_slice)* slice, GVMT_OBJECT(AST_expr_context)* ctx,
            int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Starred(GVMT_OBJECT(AST_expr)* value,
            GVMT_OBJECT(AST_expr_context)* ctx, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Name(GVMT_OBJECT(str)* id,
            GVMT_OBJECT(AST_expr_context)* ctx, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_List(R_list elts,
            GVMT_OBJECT(AST_expr_context)* ctx, int lineno, int col_offset);
GVMT_OBJECT(AST_expr)* _HotPy_AST_Tuple(R_list elts,
            GVMT_OBJECT(AST_expr_context)* ctx, int lineno, int col_offset);
GVMT_OBJECT(AST_slice)* _HotPy_AST_Slice(GVMT_OBJECT(AST_expr)* lower,
            GVMT_OBJECT(AST_expr)* upper, GVMT_OBJECT(AST_expr)* step);
GVMT_OBJECT(AST_slice)* _HotPy_AST_ExtSlice(R_list dims);
GVMT_OBJECT(AST_slice)* _HotPy_AST_Index(GVMT_OBJECT(AST_expr)* value);
GVMT_OBJECT(AST_comprehension)* _HotPy_AST_comprehension(GVMT_OBJECT(AST_expr)*
            target, GVMT_OBJECT(AST_expr)* iter, R_list ifs);
GVMT_OBJECT(AST_excepthandler)* _HotPy_AST_ExceptHandler(GVMT_OBJECT(AST_expr)*
            type, GVMT_OBJECT(str)* name, R_list body, int lineno,
            int col_offset);
GVMT_OBJECT(AST_arguments)* _HotPy_AST_arguments(R_list args,
            GVMT_OBJECT(str)* vararg, GVMT_OBJECT(AST_expr)* varargannotation,
            R_list kwonlyargs, GVMT_OBJECT(str)* kwarg,
            GVMT_OBJECT(AST_expr)* kwargannotation, R_list defaults,
            R_list kw_defaults);
GVMT_OBJECT(AST_arg)* _HotPy_AST_arg(GVMT_OBJECT(str)* arg,
            GVMT_OBJECT(AST_expr)* annotation);
GVMT_OBJECT(AST_keyword)* _HotPy_AST_keyword(GVMT_OBJECT(str)* arg,
            GVMT_OBJECT(AST_expr)* value);
GVMT_OBJECT(AST_alias)* _HotPy_AST_alias(GVMT_OBJECT(str)* name,
            GVMT_OBJECT(str)* asname);

extern void _hotpy_print_spaces(FILE* out, int times);


typedef void (*visit_mod_func)(R_AST_mod object, R_AST_Visitor visitor);
void hotpy_visit_mod(R_AST_mod object, R_AST_Visitor visitor);
typedef void (*visit_stmt_func)(R_AST_stmt object, R_AST_Visitor visitor);
void hotpy_visit_stmt(R_AST_stmt object, R_AST_Visitor visitor);
typedef void (*visit_expr_func)(R_AST_expr object, R_AST_Visitor visitor);
void hotpy_visit_expr(R_AST_expr object, R_AST_Visitor visitor);
typedef void (*visit_expr_context_func)(R_AST_expr_context object,
              R_AST_Visitor visitor);
void hotpy_visit_expr_context(R_AST_expr_context object, R_AST_Visitor visitor);
typedef void (*visit_slice_func)(R_AST_slice object, R_AST_Visitor visitor);
void hotpy_visit_slice(R_AST_slice object, R_AST_Visitor visitor);
typedef void (*visit_boolop_func)(R_AST_boolop object, R_AST_Visitor visitor);
void hotpy_visit_boolop(R_AST_boolop object, R_AST_Visitor visitor);
typedef void (*visit_operator_func)(R_AST_operator object,
              R_AST_Visitor visitor);
void hotpy_visit_operator(R_AST_operator object, R_AST_Visitor visitor);
typedef void (*visit_unaryop_func)(R_AST_unaryop object, R_AST_Visitor visitor);
void hotpy_visit_unaryop(R_AST_unaryop object, R_AST_Visitor visitor);
typedef void (*visit_cmpop_func)(R_AST_cmpop object, R_AST_Visitor visitor);
void hotpy_visit_cmpop(R_AST_cmpop object, R_AST_Visitor visitor);
typedef void (*visit_comprehension_func)(R_AST_comprehension object,
              R_AST_Visitor visitor);
void hotpy_visit_comprehension(R_AST_comprehension object,
                               R_AST_Visitor visitor);
typedef void (*visit_excepthandler_func)(R_AST_excepthandler object,
              R_AST_Visitor visitor);
void hotpy_visit_excepthandler(R_AST_excepthandler object,
                               R_AST_Visitor visitor);
typedef void (*visit_arguments_func)(R_AST_arguments object,
              R_AST_Visitor visitor);
void hotpy_visit_arguments(R_AST_arguments object, R_AST_Visitor visitor);
typedef void (*visit_arg_func)(R_AST_arg object, R_AST_Visitor visitor);
void hotpy_visit_arg(R_AST_arg object, R_AST_Visitor visitor);
typedef void (*visit_keyword_func)(R_AST_keyword object, R_AST_Visitor visitor);
void hotpy_visit_keyword(R_AST_keyword object, R_AST_Visitor visitor);
typedef void (*visit_alias_func)(R_AST_alias object, R_AST_Visitor visitor);
void hotpy_visit_alias(R_AST_alias object, R_AST_Visitor visitor);

GVMT_OBJECT(AST_Visitor) { // special 
    GVMT_OBJECT(type)* ob_type;
    uintptr_t ref_count;
    intptr_t i;
    void* p;
    visit_mod_func mod_table[4]; /*pointer*/
    visit_stmt_func stmt_table[22]; /*pointer*/
    visit_expr_func expr_table[24]; /*pointer*/
    visit_expr_context_func expr_context_table[6]; /*pointer*/
    visit_slice_func slice_table[3]; /*pointer*/
    visit_boolop_func boolop_table[2]; /*pointer*/
    visit_operator_func operator_table[12]; /*pointer*/
    visit_unaryop_func unaryop_table[4]; /*pointer*/
    visit_cmpop_func cmpop_table[10]; /*pointer*/
    visit_excepthandler_func excepthandler_table[1]; /*pointer*/
    GVMT_OBJECT(object)* r0;
    GVMT_OBJECT(object)* r1;
    GVMT_OBJECT(object)* r2;
    GVMT_OBJECT(object)* r3;
};

void print_visit_Module(R_AST_Module object, R_AST_Visitor visitor);
void print_visit_Interactive(R_AST_Interactive object, R_AST_Visitor visitor);
void print_visit_Expression(R_AST_Expression object, R_AST_Visitor visitor);
void print_visit_Suite(R_AST_Suite object, R_AST_Visitor visitor);
void print_visit_FunctionDef(R_AST_FunctionDef object, R_AST_Visitor visitor);
void print_visit_ClassDef(R_AST_ClassDef object, R_AST_Visitor visitor);
void print_visit_Return(R_AST_Return object, R_AST_Visitor visitor);
void print_visit_Delete(R_AST_Delete object, R_AST_Visitor visitor);
void print_visit_Assign(R_AST_Assign object, R_AST_Visitor visitor);
void print_visit_AugAssign(R_AST_AugAssign object, R_AST_Visitor visitor);
void print_visit_For(R_AST_For object, R_AST_Visitor visitor);
void print_visit_While(R_AST_While object, R_AST_Visitor visitor);
void print_visit_If(R_AST_If object, R_AST_Visitor visitor);
void print_visit_With(R_AST_With object, R_AST_Visitor visitor);
void print_visit_Raise(R_AST_Raise object, R_AST_Visitor visitor);
void print_visit_TryExcept(R_AST_TryExcept object, R_AST_Visitor visitor);
void print_visit_TryFinally(R_AST_TryFinally object, R_AST_Visitor visitor);
void print_visit_Assert(R_AST_Assert object, R_AST_Visitor visitor);
void print_visit_Import(R_AST_Import object, R_AST_Visitor visitor);
void print_visit_ImportFrom(R_AST_ImportFrom object, R_AST_Visitor visitor);
void print_visit_Global(R_AST_Global object, R_AST_Visitor visitor);
void print_visit_Nonlocal(R_AST_Nonlocal object, R_AST_Visitor visitor);
void print_visit_Expr(R_AST_Expr object, R_AST_Visitor visitor);
void print_visit_Pass(R_AST_Pass object, R_AST_Visitor visitor);
void print_visit_Break(R_AST_Break object, R_AST_Visitor visitor);
void print_visit_Continue(R_AST_Continue object, R_AST_Visitor visitor);
void print_visit_BoolOp(R_AST_BoolOp object, R_AST_Visitor visitor);
void print_visit_BinOp(R_AST_BinOp object, R_AST_Visitor visitor);
void print_visit_UnaryOp(R_AST_UnaryOp object, R_AST_Visitor visitor);
void print_visit_Lambda(R_AST_Lambda object, R_AST_Visitor visitor);
void print_visit_IfExp(R_AST_IfExp object, R_AST_Visitor visitor);
void print_visit_Dict(R_AST_Dict object, R_AST_Visitor visitor);
void print_visit_Set(R_AST_Set object, R_AST_Visitor visitor);
void print_visit_ListComp(R_AST_ListComp object, R_AST_Visitor visitor);
void print_visit_SetComp(R_AST_SetComp object, R_AST_Visitor visitor);
void print_visit_DictComp(R_AST_DictComp object, R_AST_Visitor visitor);
void print_visit_GeneratorExp(R_AST_GeneratorExp object, R_AST_Visitor visitor);
void print_visit_Yield(R_AST_Yield object, R_AST_Visitor visitor);
void print_visit_Compare(R_AST_Compare object, R_AST_Visitor visitor);
void print_visit_Call(R_AST_Call object, R_AST_Visitor visitor);
void print_visit_Num(R_AST_Num object, R_AST_Visitor visitor);
void print_visit_Str(R_AST_Str object, R_AST_Visitor visitor);
void print_visit_Bytes(R_AST_Bytes object, R_AST_Visitor visitor);
void print_visit_Ellipsis(R_AST_Ellipsis object, R_AST_Visitor visitor);
void print_visit_Attribute(R_AST_Attribute object, R_AST_Visitor visitor);
void print_visit_Subscript(R_AST_Subscript object, R_AST_Visitor visitor);
void print_visit_Starred(R_AST_Starred object, R_AST_Visitor visitor);
void print_visit_Name(R_AST_Name object, R_AST_Visitor visitor);
void print_visit_List(R_AST_List object, R_AST_Visitor visitor);
void print_visit_Tuple(R_AST_Tuple object, R_AST_Visitor visitor);
void print_visit_Load(R_AST_Load object, R_AST_Visitor visitor);
void print_visit_Store(R_AST_Store object, R_AST_Visitor visitor);
void print_visit_Del(R_AST_Del object, R_AST_Visitor visitor);
void print_visit_AugLoad(R_AST_AugLoad object, R_AST_Visitor visitor);
void print_visit_AugStore(R_AST_AugStore object, R_AST_Visitor visitor);
void print_visit_Param(R_AST_Param object, R_AST_Visitor visitor);
void print_visit_Slice(R_AST_Slice object, R_AST_Visitor visitor);
void print_visit_ExtSlice(R_AST_ExtSlice object, R_AST_Visitor visitor);
void print_visit_Index(R_AST_Index object, R_AST_Visitor visitor);
void print_visit_And(R_AST_And object, R_AST_Visitor visitor);
void print_visit_Or(R_AST_Or object, R_AST_Visitor visitor);
void print_visit_Add(R_AST_Add object, R_AST_Visitor visitor);
void print_visit_Sub(R_AST_Sub object, R_AST_Visitor visitor);
void print_visit_Mult(R_AST_Mult object, R_AST_Visitor visitor);
void print_visit_Div(R_AST_Div object, R_AST_Visitor visitor);
void print_visit_Mod(R_AST_Mod object, R_AST_Visitor visitor);
void print_visit_Pow(R_AST_Pow object, R_AST_Visitor visitor);
void print_visit_LShift(R_AST_LShift object, R_AST_Visitor visitor);
void print_visit_RShift(R_AST_RShift object, R_AST_Visitor visitor);
void print_visit_BitOr(R_AST_BitOr object, R_AST_Visitor visitor);
void print_visit_BitXor(R_AST_BitXor object, R_AST_Visitor visitor);
void print_visit_BitAnd(R_AST_BitAnd object, R_AST_Visitor visitor);
void print_visit_FloorDiv(R_AST_FloorDiv object, R_AST_Visitor visitor);
void print_visit_Invert(R_AST_Invert object, R_AST_Visitor visitor);
void print_visit_Not(R_AST_Not object, R_AST_Visitor visitor);
void print_visit_UAdd(R_AST_UAdd object, R_AST_Visitor visitor);
void print_visit_USub(R_AST_USub object, R_AST_Visitor visitor);
void print_visit_Eq(R_AST_Eq object, R_AST_Visitor visitor);
void print_visit_NotEq(R_AST_NotEq object, R_AST_Visitor visitor);
void print_visit_Lt(R_AST_Lt object, R_AST_Visitor visitor);
void print_visit_LtE(R_AST_LtE object, R_AST_Visitor visitor);
void print_visit_Gt(R_AST_Gt object, R_AST_Visitor visitor);
void print_visit_GtE(R_AST_GtE object, R_AST_Visitor visitor);
void print_visit_Is(R_AST_Is object, R_AST_Visitor visitor);
void print_visit_IsNot(R_AST_IsNot object, R_AST_Visitor visitor);
void print_visit_In(R_AST_In object, R_AST_Visitor visitor);
void print_visit_NotIn(R_AST_NotIn object, R_AST_Visitor visitor);
void print_visit_ExceptHandler(R_AST_ExceptHandler object,
                               R_AST_Visitor visitor);
R_AST_Visitor hotpy_make_print_visitor(void);

void symbol_visit_Module(R_AST_Module object, R_AST_Visitor visitor);
void symbol_visit_Interactive(R_AST_Interactive object, R_AST_Visitor visitor);
void symbol_visit_Expression(R_AST_Expression object, R_AST_Visitor visitor);
void symbol_visit_Suite(R_AST_Suite object, R_AST_Visitor visitor);
void symbol_visit_FunctionDef(R_AST_FunctionDef object, R_AST_Visitor visitor);
void symbol_visit_ClassDef(R_AST_ClassDef object, R_AST_Visitor visitor);
void symbol_visit_Return(R_AST_Return object, R_AST_Visitor visitor);
void symbol_visit_Delete(R_AST_Delete object, R_AST_Visitor visitor);
void symbol_visit_Assign(R_AST_Assign object, R_AST_Visitor visitor);
void symbol_visit_AugAssign(R_AST_AugAssign object, R_AST_Visitor visitor);
void symbol_visit_For(R_AST_For object, R_AST_Visitor visitor);
void symbol_visit_While(R_AST_While object, R_AST_Visitor visitor);
void symbol_visit_If(R_AST_If object, R_AST_Visitor visitor);
void symbol_visit_With(R_AST_With object, R_AST_Visitor visitor);
void symbol_visit_Raise(R_AST_Raise object, R_AST_Visitor visitor);
void symbol_visit_TryExcept(R_AST_TryExcept object, R_AST_Visitor visitor);
void symbol_visit_TryFinally(R_AST_TryFinally object, R_AST_Visitor visitor);
void symbol_visit_Assert(R_AST_Assert object, R_AST_Visitor visitor);
void symbol_visit_Import(R_AST_Import object, R_AST_Visitor visitor);
void symbol_visit_ImportFrom(R_AST_ImportFrom object, R_AST_Visitor visitor);
void symbol_visit_Global(R_AST_Global object, R_AST_Visitor visitor);
void symbol_visit_Nonlocal(R_AST_Nonlocal object, R_AST_Visitor visitor);
void symbol_visit_Expr(R_AST_Expr object, R_AST_Visitor visitor);
void symbol_visit_Pass(R_AST_Pass object, R_AST_Visitor visitor);
void symbol_visit_Break(R_AST_Break object, R_AST_Visitor visitor);
void symbol_visit_Continue(R_AST_Continue object, R_AST_Visitor visitor);
void symbol_visit_BoolOp(R_AST_BoolOp object, R_AST_Visitor visitor);
void symbol_visit_BinOp(R_AST_BinOp object, R_AST_Visitor visitor);
void symbol_visit_UnaryOp(R_AST_UnaryOp object, R_AST_Visitor visitor);
void symbol_visit_Lambda(R_AST_Lambda object, R_AST_Visitor visitor);
void symbol_visit_IfExp(R_AST_IfExp object, R_AST_Visitor visitor);
void symbol_visit_Dict(R_AST_Dict object, R_AST_Visitor visitor);
void symbol_visit_Set(R_AST_Set object, R_AST_Visitor visitor);
void symbol_visit_ListComp(R_AST_ListComp object, R_AST_Visitor visitor);
void symbol_visit_SetComp(R_AST_SetComp object, R_AST_Visitor visitor);
void symbol_visit_DictComp(R_AST_DictComp object, R_AST_Visitor visitor);
void symbol_visit_GeneratorExp(R_AST_GeneratorExp object,
                               R_AST_Visitor visitor);
void symbol_visit_Yield(R_AST_Yield object, R_AST_Visitor visitor);
void symbol_visit_Compare(R_AST_Compare object, R_AST_Visitor visitor);
void symbol_visit_Call(R_AST_Call object, R_AST_Visitor visitor);
void symbol_visit_Num(R_AST_Num object, R_AST_Visitor visitor);
void symbol_visit_Str(R_AST_Str object, R_AST_Visitor visitor);
void symbol_visit_Bytes(R_AST_Bytes object, R_AST_Visitor visitor);
void symbol_visit_Ellipsis(R_AST_Ellipsis object, R_AST_Visitor visitor);
void symbol_visit_Attribute(R_AST_Attribute object, R_AST_Visitor visitor);
void symbol_visit_Subscript(R_AST_Subscript object, R_AST_Visitor visitor);
void symbol_visit_Starred(R_AST_Starred object, R_AST_Visitor visitor);
void symbol_visit_Name(R_AST_Name object, R_AST_Visitor visitor);
void symbol_visit_List(R_AST_List object, R_AST_Visitor visitor);
void symbol_visit_Tuple(R_AST_Tuple object, R_AST_Visitor visitor);
void symbol_visit_Load(R_AST_Load object, R_AST_Visitor visitor);
void symbol_visit_Store(R_AST_Store object, R_AST_Visitor visitor);
void symbol_visit_Del(R_AST_Del object, R_AST_Visitor visitor);
void symbol_visit_AugLoad(R_AST_AugLoad object, R_AST_Visitor visitor);
void symbol_visit_AugStore(R_AST_AugStore object, R_AST_Visitor visitor);
void symbol_visit_Param(R_AST_Param object, R_AST_Visitor visitor);
void symbol_visit_Slice(R_AST_Slice object, R_AST_Visitor visitor);
void symbol_visit_ExtSlice(R_AST_ExtSlice object, R_AST_Visitor visitor);
void symbol_visit_Index(R_AST_Index object, R_AST_Visitor visitor);
void symbol_visit_And(R_AST_And object, R_AST_Visitor visitor);
void symbol_visit_Or(R_AST_Or object, R_AST_Visitor visitor);
void symbol_visit_Add(R_AST_Add object, R_AST_Visitor visitor);
void symbol_visit_Sub(R_AST_Sub object, R_AST_Visitor visitor);
void symbol_visit_Mult(R_AST_Mult object, R_AST_Visitor visitor);
void symbol_visit_Div(R_AST_Div object, R_AST_Visitor visitor);
void symbol_visit_Mod(R_AST_Mod object, R_AST_Visitor visitor);
void symbol_visit_Pow(R_AST_Pow object, R_AST_Visitor visitor);
void symbol_visit_LShift(R_AST_LShift object, R_AST_Visitor visitor);
void symbol_visit_RShift(R_AST_RShift object, R_AST_Visitor visitor);
void symbol_visit_BitOr(R_AST_BitOr object, R_AST_Visitor visitor);
void symbol_visit_BitXor(R_AST_BitXor object, R_AST_Visitor visitor);
void symbol_visit_BitAnd(R_AST_BitAnd object, R_AST_Visitor visitor);
void symbol_visit_FloorDiv(R_AST_FloorDiv object, R_AST_Visitor visitor);
void symbol_visit_Invert(R_AST_Invert object, R_AST_Visitor visitor);
void symbol_visit_Not(R_AST_Not object, R_AST_Visitor visitor);
void symbol_visit_UAdd(R_AST_UAdd object, R_AST_Visitor visitor);
void symbol_visit_USub(R_AST_USub object, R_AST_Visitor visitor);
void symbol_visit_Eq(R_AST_Eq object, R_AST_Visitor visitor);
void symbol_visit_NotEq(R_AST_NotEq object, R_AST_Visitor visitor);
void symbol_visit_Lt(R_AST_Lt object, R_AST_Visitor visitor);
void symbol_visit_LtE(R_AST_LtE object, R_AST_Visitor visitor);
void symbol_visit_Gt(R_AST_Gt object, R_AST_Visitor visitor);
void symbol_visit_GtE(R_AST_GtE object, R_AST_Visitor visitor);
void symbol_visit_Is(R_AST_Is object, R_AST_Visitor visitor);
void symbol_visit_IsNot(R_AST_IsNot object, R_AST_Visitor visitor);
void symbol_visit_In(R_AST_In object, R_AST_Visitor visitor);
void symbol_visit_NotIn(R_AST_NotIn object, R_AST_Visitor visitor);
void symbol_visit_ExceptHandler(R_AST_ExceptHandler object,
                                R_AST_Visitor visitor);
R_AST_Visitor hotpy_make_symbol_visitor(void);

void codegen_visit_Module(R_AST_Module object, R_AST_Visitor visitor);
void codegen_visit_Interactive(R_AST_Interactive object, R_AST_Visitor visitor);
void codegen_visit_Expression(R_AST_Expression object, R_AST_Visitor visitor);
void codegen_visit_Suite(R_AST_Suite object, R_AST_Visitor visitor);
void codegen_visit_FunctionDef(R_AST_FunctionDef object, R_AST_Visitor visitor);
void codegen_visit_ClassDef(R_AST_ClassDef object, R_AST_Visitor visitor);
void codegen_visit_Return(R_AST_Return object, R_AST_Visitor visitor);
void codegen_visit_Delete(R_AST_Delete object, R_AST_Visitor visitor);
void codegen_visit_Assign(R_AST_Assign object, R_AST_Visitor visitor);
void codegen_visit_AugAssign(R_AST_AugAssign object, R_AST_Visitor visitor);
void codegen_visit_For(R_AST_For object, R_AST_Visitor visitor);
void codegen_visit_While(R_AST_While object, R_AST_Visitor visitor);
void codegen_visit_If(R_AST_If object, R_AST_Visitor visitor);
void codegen_visit_With(R_AST_With object, R_AST_Visitor visitor);
void codegen_visit_Raise(R_AST_Raise object, R_AST_Visitor visitor);
void codegen_visit_TryExcept(R_AST_TryExcept object, R_AST_Visitor visitor);
void codegen_visit_TryFinally(R_AST_TryFinally object, R_AST_Visitor visitor);
void codegen_visit_Assert(R_AST_Assert object, R_AST_Visitor visitor);
void codegen_visit_Import(R_AST_Import object, R_AST_Visitor visitor);
void codegen_visit_ImportFrom(R_AST_ImportFrom object, R_AST_Visitor visitor);
void codegen_visit_Global(R_AST_Global object, R_AST_Visitor visitor);
void codegen_visit_Nonlocal(R_AST_Nonlocal object, R_AST_Visitor visitor);
void codegen_visit_Expr(R_AST_Expr object, R_AST_Visitor visitor);
void codegen_visit_Pass(R_AST_Pass object, R_AST_Visitor visitor);
void codegen_visit_Break(R_AST_Break object, R_AST_Visitor visitor);
void codegen_visit_Continue(R_AST_Continue object, R_AST_Visitor visitor);
void codegen_visit_BoolOp(R_AST_BoolOp object, R_AST_Visitor visitor);
void codegen_visit_BinOp(R_AST_BinOp object, R_AST_Visitor visitor);
void codegen_visit_UnaryOp(R_AST_UnaryOp object, R_AST_Visitor visitor);
void codegen_visit_Lambda(R_AST_Lambda object, R_AST_Visitor visitor);
void codegen_visit_IfExp(R_AST_IfExp object, R_AST_Visitor visitor);
void codegen_visit_Dict(R_AST_Dict object, R_AST_Visitor visitor);
void codegen_visit_Set(R_AST_Set object, R_AST_Visitor visitor);
void codegen_visit_ListComp(R_AST_ListComp object, R_AST_Visitor visitor);
void codegen_visit_SetComp(R_AST_SetComp object, R_AST_Visitor visitor);
void codegen_visit_DictComp(R_AST_DictComp object, R_AST_Visitor visitor);
void codegen_visit_GeneratorExp(R_AST_GeneratorExp object,
                                R_AST_Visitor visitor);
void codegen_visit_Yield(R_AST_Yield object, R_AST_Visitor visitor);
void codegen_visit_Compare(R_AST_Compare object, R_AST_Visitor visitor);
void codegen_visit_Call(R_AST_Call object, R_AST_Visitor visitor);
void codegen_visit_Num(R_AST_Num object, R_AST_Visitor visitor);
void codegen_visit_Str(R_AST_Str object, R_AST_Visitor visitor);
void codegen_visit_Bytes(R_AST_Bytes object, R_AST_Visitor visitor);
void codegen_visit_Ellipsis(R_AST_Ellipsis object, R_AST_Visitor visitor);
void codegen_visit_Attribute(R_AST_Attribute object, R_AST_Visitor visitor);
void codegen_visit_Subscript(R_AST_Subscript object, R_AST_Visitor visitor);
void codegen_visit_Starred(R_AST_Starred object, R_AST_Visitor visitor);
void codegen_visit_Name(R_AST_Name object, R_AST_Visitor visitor);
void codegen_visit_List(R_AST_List object, R_AST_Visitor visitor);
void codegen_visit_Tuple(R_AST_Tuple object, R_AST_Visitor visitor);
void codegen_visit_Load(R_AST_Load object, R_AST_Visitor visitor);
void codegen_visit_Store(R_AST_Store object, R_AST_Visitor visitor);
void codegen_visit_Del(R_AST_Del object, R_AST_Visitor visitor);
void codegen_visit_AugLoad(R_AST_AugLoad object, R_AST_Visitor visitor);
void codegen_visit_AugStore(R_AST_AugStore object, R_AST_Visitor visitor);
void codegen_visit_Param(R_AST_Param object, R_AST_Visitor visitor);
void codegen_visit_Slice(R_AST_Slice object, R_AST_Visitor visitor);
void codegen_visit_ExtSlice(R_AST_ExtSlice object, R_AST_Visitor visitor);
void codegen_visit_Index(R_AST_Index object, R_AST_Visitor visitor);
void codegen_visit_And(R_AST_And object, R_AST_Visitor visitor);
void codegen_visit_Or(R_AST_Or object, R_AST_Visitor visitor);
void codegen_visit_Add(R_AST_Add object, R_AST_Visitor visitor);
void codegen_visit_Sub(R_AST_Sub object, R_AST_Visitor visitor);
void codegen_visit_Mult(R_AST_Mult object, R_AST_Visitor visitor);
void codegen_visit_Div(R_AST_Div object, R_AST_Visitor visitor);
void codegen_visit_Mod(R_AST_Mod object, R_AST_Visitor visitor);
void codegen_visit_Pow(R_AST_Pow object, R_AST_Visitor visitor);
void codegen_visit_LShift(R_AST_LShift object, R_AST_Visitor visitor);
void codegen_visit_RShift(R_AST_RShift object, R_AST_Visitor visitor);
void codegen_visit_BitOr(R_AST_BitOr object, R_AST_Visitor visitor);
void codegen_visit_BitXor(R_AST_BitXor object, R_AST_Visitor visitor);
void codegen_visit_BitAnd(R_AST_BitAnd object, R_AST_Visitor visitor);
void codegen_visit_FloorDiv(R_AST_FloorDiv object, R_AST_Visitor visitor);
void codegen_visit_Invert(R_AST_Invert object, R_AST_Visitor visitor);
void codegen_visit_Not(R_AST_Not object, R_AST_Visitor visitor);
void codegen_visit_UAdd(R_AST_UAdd object, R_AST_Visitor visitor);
void codegen_visit_USub(R_AST_USub object, R_AST_Visitor visitor);
void codegen_visit_Eq(R_AST_Eq object, R_AST_Visitor visitor);
void codegen_visit_NotEq(R_AST_NotEq object, R_AST_Visitor visitor);
void codegen_visit_Lt(R_AST_Lt object, R_AST_Visitor visitor);
void codegen_visit_LtE(R_AST_LtE object, R_AST_Visitor visitor);
void codegen_visit_Gt(R_AST_Gt object, R_AST_Visitor visitor);
void codegen_visit_GtE(R_AST_GtE object, R_AST_Visitor visitor);
void codegen_visit_Is(R_AST_Is object, R_AST_Visitor visitor);
void codegen_visit_IsNot(R_AST_IsNot object, R_AST_Visitor visitor);
void codegen_visit_In(R_AST_In object, R_AST_Visitor visitor);
void codegen_visit_NotIn(R_AST_NotIn object, R_AST_Visitor visitor);
void codegen_visit_ExceptHandler(R_AST_ExceptHandler object,
                                 R_AST_Visitor visitor);
R_AST_Visitor hotpy_make_codegen_visitor(void);

#endif
