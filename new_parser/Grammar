# Grammar for Python

# Note:  Changing the grammar specified in this file will most likely
#        require corresponding changes in the parser module
#        (../Modules/parsermodule.c).  If you can't make the changes to
#        that module yourself, please co-ordinate the required changes
#        with someone who can; ask around on python-dev for help.  Fred
#        Drake <fdrake@acm.org> will probably be listening there.

# NOTE WELL: You should also follow all the steps listed in PEP 306,
# "How to Change Python's Grammar"

# Start symbols for the grammar:
#	single_input is a single interactive statement;
#	file_input is a module or sequence of commands read from an input file;
#	eval_input is the input for the eval() and input() functions.
# NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: void | simple_stmt | compound_stmt
void: NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: testlist NEWLINE* ENDMARKER

decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef)
funcdef: 'def' NAME parameters ['->' test] ':' suite
parameters: '(' [typedargslist] ')'

targ: NAME [':' test]
targdef: targ ['=' test]
tkwarg: '**'  targ
ttuplearg: '*' [ targ ]
targlist_item: targdef | ttuplearg | tkwarg
typedargslist: targlist_item ( ',' targlist_item)*

vargdef: NAME ['=' test]
vkwarg: '**' NAME
vtuplearg: '*' [ NAME ]
vararg: vargdef | vkwarg | vtuplearg
varargslist:  vararg ( ',' vararg)*

stmt: simple_stmt | compound_stmt
small_stmt_list: small_stmt (';' small_stmt)* [';']
simple_stmt: small_stmt_list NEWLINE
small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt: testlist (augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist))*)
augassign: ('+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
# For normal assignments, additional restrictions enforced by the interpreter
del_stmt: 'del' expr (',' expr)* [',']
pass_stmt: 'pass'
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: 'break'
continue_stmt: 'continue'
return_stmt: 'return' [testlist]
yield_stmt: yield_expr
raise_stmt: 'raise' [test ['from' test]]
import_stmt: import_name | import_from
import_name: 'import' dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
level: ('.' | '...')+
relative_source: level [ dotted_name ]
import_source: dotted_name | relative_source
import_from: ('from' import_source
              'import' ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME ['as' NAME]
dotted_as_name: dotted_name ['as' NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
name_list: NAME (',' NAME)*
global_stmt: 'global' name_list
nonlocal_stmt: 'nonlocal' name_list
assert_stmt: 'assert' test [',' test]

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated
if_stmt: 'if' test ':' suite ('elif' test ':' suite)* ['else' ':' suite]
while_stmt: 'while' test ':' suite ['else' ':' suite]
for_stmt: 'for' exprlist 'in' testlist ':' suite ['else' ':' suite]
try_stmt: ('try' ':' suite
           ((except_clause ':' suite)+
	    ['else' ':' suite]
	    ['finally' ':' suite] |
	   'finally' ':' suite))
with_stmt: 'with' test [ 'as' expr ] ':' suite

# NB compile.c makes sure that the default except clause is last
except_clause: 'except' [test ['as' NAME]]
suite: simple_stmt | indented_block
indented_block: NEWLINE INDENT stmt+ DEDENT

trinary_expr:  or_test ['if' or_test 'else' test]
test: trinary_expr | lambdef
test_nocond: or_test | lambdef_nocond
lambdef: 'lambda' [varargslist] ':' test
lambdef_nocond: 'lambda' [varargslist] ':' test_nocond
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_expr: 'not' not_test
not_test: not_expr | comparison
comparison: star_expr (comp_op star_expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'| not_in | is
not_in: 'not' 'in' 
is: 'is' [ 'not' ]
star_expr: ['*'] expr
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
mult_op: '*'|'/'|'%'|'//'
term: factor (mult_op factor)*
unary_op: ('+'|'-'|'~')
unary_expr: unary_op factor
factor: unary_expr | power
power: simple ['**' factor]
simple: atom member*
bracketted_expr: '(' [yield_expr|testlist_comp] ')'
list_expr: '[' [testlist_comp] ']'
dictorset_expr: '{' [dictorsetmaker] '}'
string: STRING+
atom: ( bracketted_expr |
       list_expr |
       dictorset_expr |
       NAME | FLOAT | INTEGER | string | '...' | 'None' | 'True' | 'False')
testlist_comp: test ( comp_for | (',' test)* [','] )

member: call | index | attr
call: '(' [arglist] ')'
index: '[' subscriptlist ']'
attr: '.' NAME

subscriptlist: subscript (',' subscript)* [',']

rslice: ':' [test] [sliceop]
sliceop: ':' [test]
slice: test [ rslice ]
subscript: slice | rslice

exprlist: star_expr (',' star_expr)* [',']
testlist: test (',' test)* [',']
dictorsetmaker: ( test 
                ( ':' test (comp_for | (',' test ':' test)* [',']) |
                  (comp_for | (',' test)* [','])) )

classdef: 'class' NAME ['(' [arglist] ')'] ':' suite

kwarg: '**' test
#Tuple arg is ambiguous with starred_arg. Convert in AST.
#tuplearg: '*' test
argument: test [ comp_for | '=' test ]  # Really [keyword '='] test
arg: argument | kwarg
arglist: arg ( ',' arg)*

comp_for: 'for' exprlist 'in' or_test [ comp_if* [ comp_for ] ] 
comp_if: 'if' test_nocond

#comp_iter: comp_for | comp_if
#comp_for: 'for' exprlist 'in' or_test [comp_iter]
#comp_if: 'if' test_nocond [comp_iter]

yield_expr: 'yield' [testlist]
